#!/bin/bash
# Script t·∫£i c√°c checkpoint v√† model cho ComfyUI

# ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng
MODEL_DIR="$HOME/n8n/storage/ComfyUI/models"
CUSTOM_NODES_DIR="$HOME/n8n/storage/ComfyUI/custom_nodes"

# H√†m hi·ªÉn th·ªã tin nh·∫Øn ƒë·∫πp h∆°n
print_section() {
  echo "--------- üü¢ $1 -----------"
}

print_end_section() {
  echo "--------- üî¥ $1 -----------"
}

# H√†m ki·ªÉm tra xem package python ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
check_package() {
  if pip list | grep -q "$1"; then
    echo "‚úÖ G√≥i $1 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    return 0
  else
    echo "‚ùå G√≥i $1 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    return 1
  fi
}

# H√†m ki·ªÉm tra xem th∆∞ m·ª•c t·ªìn t·∫°i v√† tr·ªëng kh√¥ng
check_directory() {
  if [ ! -d "$1" ]; then
    echo "Th∆∞ m·ª•c $1 kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o..."
    mkdir -p "$1"
    return 0
  elif [ -z "$(ls -A "$1")" ]; then
    echo "Th∆∞ m·ª•c $1 tr·ªëng"
    return 0
  else
    echo "Th∆∞ m·ª•c $1 ƒë√£ t·ªìn t·∫°i v√† c√≥ n·ªôi dung"
    return 1
  fi
}

# H√†m ki·ªÉm tra v√† t·∫£i model
download_model() {
  local url=$1
  local dest=$2
  local filename=$(basename "$dest")
  
  if [ -f "$dest" ]; then
    echo "‚úÖ $filename ƒë√£ t·ªìn t·∫°i. B·ªè qua..."
  else
    echo "üîÑ ƒêang t·∫£i $filename..."
    wget -q --show-progress -O "$dest" "$url"
    
    if [ -f "$dest" ]; then
      echo "‚úÖ T·∫£i $filename th√†nh c√¥ng!"
    else
      echo "‚ùå L·ªói khi t·∫£i $filename"
    fi
  fi
}

# H√†m t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
create_directory() {
  if [ ! -d "$1" ]; then
    mkdir -p "$1"
    echo "ƒê√£ t·∫°o th∆∞ m·ª•c $1"
  fi
}

# H√†m c√†i ƒë·∫∑t custom node
install_custom_node() {
  local node_name=$1
  local git_url=$2
  local requirements_file=$3
  
  echo "Ki·ªÉm tra custom node $node_name..."
  
  # Ki·ªÉm tra xem th∆∞ m·ª•c custom node ƒë√£ t·ªìn t·∫°i ch∆∞a
  if [ -d "$CUSTOM_NODES_DIR/$node_name" ]; then
    echo "Th∆∞ m·ª•c $node_name ƒë√£ t·ªìn t·∫°i. C·∫≠p nh·∫≠t repository..."
    cd "$CUSTOM_NODES_DIR/$node_name"
    git pull
  else
    echo "Th∆∞ m·ª•c $node_name ch∆∞a t·ªìn t·∫°i. Clone repository..."
    cd "$CUSTOM_NODES_DIR"
    git clone "$git_url" "$node_name"
  fi
  
  # C√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc n·∫øu c√≥ file requirements
  if [ -f "$CUSTOM_NODES_DIR/$node_name/$requirements_file" ]; then
    echo "C√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc cho $node_name..."
    pip install -r "$CUSTOM_NODES_DIR/$node_name/$requirements_file"
  fi
  
  echo "‚úÖ Ho√†n th√†nh c√†i ƒë·∫∑t $node_name"
}

# Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c g·ªëc cho models
create_directory "$MODEL_DIR"

# Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c cho custom nodes
create_directory "$CUSTOM_NODES_DIR"

# 1. T·∫£i v√† c√†i ƒë·∫∑t custom nodes
print_section "B·∫Øt ƒë·∫ßu t·∫£i v√† c√†i ƒë·∫∑t custom nodes"

# C√†i ƒë·∫∑t ComfyUI-GGUF
install_custom_node "ComfyUI-GGUF" "https://github.com/city96/ComfyUI-GGUF.git" "requirements.txt"

# C√†i ƒë·∫∑t ComfyUI-VideoHelperSuite
install_custom_node "ComfyUI-VideoHelperSuite" "https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite.git" "requirements.txt"

print_end_section "Ho√†n th√†nh t·∫£i v√† c√†i ƒë·∫∑t custom nodes"

# 2. T·∫£i Flux1 Checkpoint
print_section "B·∫Øt ƒë·∫ßu t·∫£i Flux1 Checkpoint"

# T·∫°o th∆∞ m·ª•c cho Flux1 Checkpoint
create_directory "$MODEL_DIR/checkpoints/FLUX1"

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Flux1 Checkpoint
FLUX1_FILE="$MODEL_DIR/checkpoints/FLUX1/flux1-dev-fp8.safetensors"

# Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
if [ -f "$FLUX1_FILE" ]; then
    echo "File Flux1-dev-fp8 Checkpoint ƒë√£ t·ªìn t·∫°i. B·ªè qua b∆∞·ªõc t·∫£i..."
else
    echo "ƒêang t·∫£i Flux1-dev-fp8 Checkpoint..."
    # Th√™m -q ƒë·ªÉ ch·∫ø ƒë·ªô y√™n l·∫∑ng v·ªõi thanh ti·∫øn tr√¨nh ƒë∆°n gi·∫£n
    wget -q --show-progress -O "$FLUX1_FILE" https://huggingface.co/Comfy-Org/flux1-dev/resolve/main/flux1-dev-fp8.safetensors
    
    # Ki·ªÉm tra xem t·∫£i th√†nh c√¥ng kh√¥ng
    if [ -f "$FLUX1_FILE" ]; then
        echo "T·∫£i Flux1-dev-fp8 Checkpoint th√†nh c√¥ng!"
    else
        echo "‚ö†Ô∏è T·∫£i Flux1-dev-fp8 Checkpoint kh√¥ng th√†nh c√¥ng. Vui l√≤ng t·∫£i th·ªß c√¥ng sau."
    fi
fi

print_end_section "Ho√†n th√†nh t·∫£i Flux1 Checkpoint"

# 3. Ki·ªÉm tra th∆∞ m·ª•c GGUF v√† t·∫£i model GGUF n·∫øu c·∫ßn
print_section "Ki·ªÉm tra v√† t·∫£i model GGUF"

# T·∫°o th∆∞ m·ª•c cho model GGUF
create_directory "$MODEL_DIR/gguf"

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn model GGUF
GGUF_MODEL="$MODEL_DIR/gguf/flux1-dev-q4_0.gguf"

# H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën t·∫£i model GGUF kh√¥ng
echo -n "B·∫°n c√≥ mu·ªën t·∫£i model GGUF cho Flux1 (ti·∫øt ki·ªám VRAM) kh√¥ng? [y/N]: "
read -r download_gguf

if [[ "$download_gguf" == "y" || "$download_gguf" == "Y" ]]; then
    if [ -f "$GGUF_MODEL" ]; then
        echo "Model GGUF ƒë√£ t·ªìn t·∫°i. B·ªè qua b∆∞·ªõc t·∫£i..."
    else
        echo "ƒêang t·∫£i model GGUF cho Flux1..."
        # URL l√† v√≠ d·ª•, c·∫ßn thay th·∫ø b·∫±ng URL th·ª±c t·∫ø n·∫øu c√≥
        wget -q --show-progress -O "$GGUF_MODEL" "https://huggingface.co/city96/ComfyUI-GGUF/resolve/main/flux1-dev-q4_0.gguf"
        
        if [ -f "$GGUF_MODEL" ]; then
            echo "‚úÖ T·∫£i model GGUF th√†nh c√¥ng!"
        else
            echo "‚ùå L·ªói khi t·∫£i model GGUF"
        fi
    fi
else
    echo "B·ªè qua t·∫£i model GGUF."
fi

print_end_section "Ho√†n th√†nh ki·ªÉm tra model GGUF"

# 4. T·∫£i Wan2.1 v√† Flux Models
print_section "B·∫Øt ƒë·∫ßu t·∫£i Wan2.1 v√† Flux Models"

# T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c cho Wan2.1
create_directory "$MODEL_DIR/text_encoders"
create_directory "$MODEL_DIR/vae"
create_directory "$MODEL_DIR/diffusion_models"
create_directory "$MODEL_DIR/clip_vision"

# T·∫£i c√°c model Wan2.1
echo "ƒêang t·∫£i c√°c model Wan2.1..."
download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/text_encoders/umt5_xxl_fp8_e4m3fn_scaled.safetensors" \
  "$MODEL_DIR/text_encoders/umt5_xxl_fp8_e4m3fn_scaled.safetensors"

download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/vae/wan_2.1_vae.safetensors" \
  "$MODEL_DIR/vae/wan_2.1_vae.safetensors"

download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_t2v_1.3B_bf16.safetensors" \
  "$MODEL_DIR/diffusion_models/wan2.1_t2v_1.3B_bf16.safetensors"

print_end_section "Ho√†n th√†nh t·∫£i model c∆° b·∫£n"

# 5. T·∫£i th√™m c√°c model Wan2.1 m·ªõi
print_section "B·∫Øt ƒë·∫ßu t·∫£i th√™m c√°c model Wan2.1 m·ªõi"

# T·∫£i m√¥ h√¨nh clip_vision
download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/clip_vision/clip_vision_h.safetensors" \
  "$MODEL_DIR/clip_vision/clip_vision_h.safetensors"

# H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën t·∫£i model 14B kh√¥ng
echo -n "B·∫°n c√≥ mu·ªën t·∫£i m√¥ h√¨nh 14B kh√¥ng? (model n√†y c√≥ k√≠ch th∆∞·ªõc l·ªõn ~20GB) [y/N]: "
read -r download_14b

if [[ "$download_14b" == "y" || "$download_14b" == "Y" ]]; then
    echo "ƒêang t·∫£i c√°c m√¥ h√¨nh 14B..."
    
    # T·∫£i m√¥ h√¨nh t2v (text to video) 14B
    download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_t2v_14B_fp8_e4m3fn.safetensors" \
      "$MODEL_DIR/diffusion_models/wan2.1_t2v_14B_fp8_e4m3fn.safetensors"
    
    # T·∫£i m√¥ h√¨nh i2v (image to video) 14B
    download_model "https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_i2v_720p_14B_fp8_e4m3fn.safetensors" \
      "$MODEL_DIR/diffusion_models/wan2.1_i2v_720p_14B_fp8_e4m3fn.safetensors"
else
    echo "B·ªè qua t·∫£i m√¥ h√¨nh 14B."
fi

print_end_section "Ho√†n th√†nh t·∫£i model"

# C·∫•p quy·ªÅn cho th∆∞ m·ª•c models v√† custom_nodes
echo "ƒêang c·∫•p quy·ªÅn cho th∆∞ m·ª•c models v√† custom_nodes..."
chmod -R 777 "$MODEL_DIR"
chmod -R 777 "$CUSTOM_NODES_DIR"

# Ki·ªÉm tra c√°c model ƒë√£ t·∫£i
print_section "Ki·ªÉm tra models v√† custom nodes ƒë√£ t·∫£i"

echo "Danh s√°ch checkpoint ƒë√£ t·∫£i:"
ls -la "$MODEL_DIR/checkpoints" 2>/dev/null || echo "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c checkpoints"

echo "Danh s√°ch model GGUF ƒë√£ t·∫£i:"
ls -la "$MODEL_DIR/gguf" 2>/dev/null || echo "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c gguf"

for model_type in "text_encoders" "diffusion_models" "clip_vision" "vae"; do
    echo "C√°c model trong $MODEL_DIR/$model_type:"
    ls -la "$MODEL_DIR/$model_type" 2>/dev/null || echo "  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c n√†y"
done

echo "Danh s√°ch custom nodes ƒë√£ c√†i ƒë·∫∑t:"
ls -la "$CUSTOM_NODES_DIR" 2>/dev/null || echo "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c custom_nodes"

print_end_section "Ho√†n th√†nh ki·ªÉm tra"

echo "T·∫•t c·∫£ c√°c model v√† custom nodes ƒë√£ ƒë∆∞·ª£c t·∫£i v√† c√†i ƒë·∫∑t th√†nh c√¥ng!"
echo "B·∫°n c√≥ th·ªÉ t√¨m th·∫•y models trong th∆∞ m·ª•c: $MODEL_DIR"
echo "V√† custom nodes trong th∆∞ m·ª•c: $CUSTOM_NODES_DIR"