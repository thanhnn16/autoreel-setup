#!/bin/bash
# Script c√†i ƒë·∫∑t v√† thi·∫øt l·∫≠p n8n v·ªõi Docker v√† Nginx

# H√†m ƒë·ª£i kh√≥a apt ƒë∆∞·ª£c gi·∫£i ph√≥ng
wait_for_apt() {
  echo "ƒêang ƒë·ª£i kh√≥a apt ƒë∆∞·ª£c gi·∫£i ph√≥ng..."
  while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
    echo "ƒêang ƒë·ª£i ti·∫øn tr√¨nh apt kh√°c k·∫øt th√∫c..."
    sleep 5
  done
  echo "Kh√≥a apt ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng, ti·∫øp t·ª•c c√†i ƒë·∫∑t..."
}

# H√†m ki·ªÉm tra v√† c√†i ƒë·∫∑t CUDA
check_cuda_installation() {
  echo "Ki·ªÉm tra c√†i ƒë·∫∑t CUDA..."
  
  if command -v nvcc &> /dev/null; then
    nvcc_version=$(nvcc --version | grep "release" | awk '{print $6}' | cut -d',' -f1)
    echo "‚úÖ CUDA ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t, phi√™n b·∫£n: $nvcc_version"
    
    # Ki·ªÉm tra phi√™n b·∫£n CUDA t·ª´ nvidia-smi
    if command -v nvidia-smi &> /dev/null; then
      cuda_version=$(nvidia-smi | grep "CUDA Version" | awk '{print $9}')
      echo "‚úÖ CUDA Version t·ª´ nvidia-smi: $cuda_version"
      
      # N·∫øu phi√™n b·∫£n CUDA < 12.6, th·ª±c hi·ªán n√¢ng c·∫•p
      if [[ $(echo "$cuda_version < 12.6" | bc -l) -eq 1 ]]; then
        echo "‚ö†Ô∏è Phi√™n b·∫£n CUDA hi·ªán t·∫°i th·∫•p h∆°n 12.6. ƒêang n√¢ng c·∫•p l√™n CUDA 12.6..."
        
        # T·∫£i driver NVIDIA cho CUDA 12.6
        wget https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.28.03_linux.run

        # C·∫•p quy·ªÅn th·ª±c thi
        chmod +x cuda_12.6.0_560.28.03_linux.run

        # C√†i ƒë·∫∑t driver v√† CUDA Toolkit
        sudo ./cuda_12.6.0_560.28.03_linux.run
        
        # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
        echo 'export PATH=/usr/local/cuda-12.6/bin${PATH:+:${PATH}}' >> ~/.bashrc
        echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc
        source ~/.bashrc
        
        echo "‚úÖ ƒê√£ n√¢ng c·∫•p l√™n CUDA 12.6. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
      fi
    fi
  else
    echo "‚ö†Ô∏è CUDA ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t CUDA 12.6..."
    
    # D·ª´ng t·∫•t c·∫£ d·ªãch v·ª• ƒëang s·ª≠ d·ª•ng NVIDIA
    echo "D·ª´ng t·∫•t c·∫£ d·ªãch v·ª• ƒëang s·ª≠ d·ª•ng NVIDIA..."
    sudo systemctl stop nvidia-persistenced.service || true
    
    # G·ª° b·ªè t·∫•t c·∫£ module NVIDIA hi·ªán t·∫°i
    echo "G·ª° b·ªè t·∫•t c·∫£ module NVIDIA hi·ªán t·∫°i..."
    sudo rmmod nvidia_drm || true
    sudo rmmod nvidia_modeset || true
    sudo rmmod nvidia_uvm || true
    sudo rmmod nvidia || true
    
    # T·∫£i driver NVIDIA cho CUDA 12.6
    wget https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.28.03_linux.run

    # C·∫•p quy·ªÅn th·ª±c thi
    chmod +x cuda_12.6.0_560.28.03_linux.run

    # C√†i ƒë·∫∑t driver v√† CUDA Toolkit v·ªõi t√πy ch·ªçn b·ªè qua ki·ªÉm tra phi√™n b·∫£n compiler
    # v√† ch·∫•p nh·∫≠n ti·∫øp t·ª•c b·ªè qua sanity checks
    echo "C√†i ƒë·∫∑t CUDA 12.6 v√† NVIDIA driver..."
    sudo ./cuda_12.6.0_560.28.03_linux.run --silent --driver --toolkit --samples --run-nvidia-xconfig --override --no-cc-version-check
    # N·∫øu c√°ch tr√™n kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ ph∆∞∆°ng ph√°p kh√°c
    if [ $? -ne 0 ]; then
      echo "Th·ª≠ ph∆∞∆°ng ph√°p c√†i ƒë·∫∑t kh√°c..."
      sudo apt-get update
      sudo apt-get install -y build-essential dkms
      sudo apt-get install -y linux-headers-$(uname -r)
      sudo ./cuda_12.6.0_560.28.03_linux.run --driver --toolkit --silent --override
    fi
    
    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    echo 'export PATH=/usr/local/cuda-12.6/bin${PATH:+:${PATH}}' >> ~/.bashrc
    echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc
    source ~/.bashrc
    
    # Ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t
    if command -v nvcc &> /dev/null; then
      nvcc_version=$(nvcc --version | grep "release" | awk '{print $6}' | cut -d',' -f1)
      echo "‚úÖ CUDA ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng, phi√™n b·∫£n: $nvcc_version"
    else
      echo "‚ö†Ô∏è C√†i ƒë·∫∑t CUDA kh√¥ng th√†nh c√¥ng. Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng."
    fi
  fi
}

# H√†m ki·ªÉm tra NVIDIA driver
check_nvidia_driver() {
  echo "Ki·ªÉm tra NVIDIA driver..."
  if command -v nvidia-smi &> /dev/null; then
    nvidia_output=$(nvidia-smi 2>&1)
    if echo "$nvidia_output" | grep -q "NVIDIA-SMI has failed"; then
      echo "‚ö†Ô∏è Ph√°t hi·ªán v·∫•n ƒë·ªÅ v·ªõi NVIDIA driver. ƒêang th·ª±c hi·ªán kh·∫Øc ph·ª•c..."
      
      # C·∫≠p nh·∫≠t package lists
      wait_for_apt && sudo apt-get update -y
      
      # G·ª° b·ªè driver c≈© n·∫øu c√≥
      wait_for_apt && sudo apt-get remove --purge -y nvidia-*
      
      # C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
      wait_for_apt && sudo apt-get install -y build-essential dkms
      
      # Ki·ªÉm tra phi√™n b·∫£n driver ƒë∆∞·ª£c khuy·∫øn ngh·ªã
      wait_for_apt && sudo apt-get install -y ubuntu-drivers-common
      driver_version=$(ubuntu-drivers devices | grep "recommended" | awk '{print $3}' | cut -d'-' -f2)
      if [ -z "$driver_version" ]; then
        driver_version="550" # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
      fi
      
      echo "ƒêang c√†i ƒë·∫∑t l·∫°i NVIDIA driver phi√™n b·∫£n $driver_version..."
      wait_for_apt && sudo apt-get install -y --reinstall nvidia-driver-$driver_version
      
      echo "Ki·ªÉm tra v√† t·∫£i kernel module NVIDIA..."
      if ! lsmod | grep -q nvidia; then
        echo "T·∫£i kernel module NVIDIA..."
        sudo modprobe nvidia
      fi
      
      echo "Ki·ªÉm tra l·∫°i NVIDIA driver..."
      nvidia-smi
      
      echo "‚ö†Ô∏è N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ v·ªõi NVIDIA driver, vui l√≤ng kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng v√† ch·∫°y l·∫°i script."
      echo "T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
      restart_choice="y"
      if [[ "$restart_choice" == "y" ]]; then
        echo "H·ªá th·ªëng s·∫Ω kh·ªüi ƒë·ªông l·∫°i sau 5 gi√¢y..."
        sleep 5
        sudo reboot
      fi
    else
      echo "‚úÖ NVIDIA driver ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."
      # Hi·ªÉn th·ªã th√¥ng tin GPU
      echo "Th√¥ng tin GPU:"
      nvidia-smi
    fi
  else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y NVIDIA driver. ƒêang c√†i ƒë·∫∑t..."
    wait_for_apt && sudo apt-get update -y
    wait_for_apt && sudo apt-get install -y ubuntu-drivers-common
    
    # T√¨m driver ƒë∆∞·ª£c khuy·∫øn ngh·ªã
    driver_version=$(ubuntu-drivers devices | grep "recommended" | awk '{print $3}' | cut -d'-' -f2)
    if [ -z "$driver_version" ]; then
      driver_version="550" # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
    fi
    
    echo "ƒêang c√†i ƒë·∫∑t NVIDIA driver phi√™n b·∫£n $driver_version..."
    wait_for_apt && sudo apt-get install -y nvidia-driver-$driver_version
    
    echo "‚ö†Ô∏è C·∫ßn kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng ƒë·ªÉ NVIDIA driver c√≥ hi·ªáu l·ª±c."
    echo "T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng ngay b√¢y gi·ªù."
    restart_choice="y"
    if [[ "$restart_choice" == "y" ]]; then
      echo "H·ªá th·ªëng s·∫Ω kh·ªüi ƒë·ªông l·∫°i sau 5 gi√¢y..."
      sleep 5
      sudo reboot
    else
      echo "‚ö†Ô∏è Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng sau khi c√†i ƒë·∫∑t ho√†n t·∫•t ƒë·ªÉ NVIDIA driver c√≥ hi·ªáu l·ª±c."
    fi
  fi
}

# H√†m ki·ªÉm tra GPU cho Docker
verify_gpu_for_docker() {
  echo "Ki·ªÉm tra GPU cho Docker..."
  
  # Ki·ªÉm tra xem Docker c√≥ th·ªÉ truy c·∫≠p GPU kh√¥ng
  if sudo docker run --rm --gpus all nvidia/cuda:12.6.0-base-ubuntu22.04 nvidia-smi &> /dev/null; then
    echo "‚úÖ Docker c√≥ th·ªÉ truy c·∫≠p GPU th√†nh c√¥ng."
    # Hi·ªÉn th·ªã th√¥ng tin GPU t·ª´ container
    sudo docker run --rm --gpus all nvidia/cuda:12.6.0-base-ubuntu22.04 nvidia-smi
  else
    echo "‚ö†Ô∏è Docker kh√¥ng th·ªÉ truy c·∫≠p GPU. ƒêang c·∫•u h√¨nh l·∫°i NVIDIA Container Toolkit..."
    
    # C√†i ƒë·∫∑t l·∫°i NVIDIA Container Toolkit
    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \
    | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' \
    | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    
    wait_for_apt && sudo apt-get update -y
    wait_for_apt && sudo apt-get install -y nvidia-container-toolkit
    
    # C·∫•u h√¨nh Docker ƒë·ªÉ s·ª≠ d·ª•ng NVIDIA runtime
    sudo nvidia-ctk runtime configure --runtime=docker
    sudo systemctl restart docker
    
    # Ki·ªÉm tra l·∫°i
    if sudo docker run --rm --gpus all nvidia/cuda:12.6.0-base-ubuntu22.04 nvidia-smi &> /dev/null; then
      echo "‚úÖ Docker ƒë√£ c√≥ th·ªÉ truy c·∫≠p GPU th√†nh c√¥ng."
      sudo docker run --rm --gpus all nvidia/cuda:12.6.0-base-ubuntu22.04 nvidia-smi
    else
      echo "‚ö†Ô∏è Docker v·∫´n kh√¥ng th·ªÉ truy c·∫≠p GPU. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t th·ªß c√¥ng."
    fi
  fi
}

# H√†m d·ªçn d·∫πp th∆∞ m·ª•c v√† file t·∫°m
cleanup_temp_files() {
  echo "ƒêang d·ªçn d·∫πp th∆∞ m·ª•c v√† file t·∫°m..."
  
  # X√≥a c√°c file t·∫°m v√† cache apt
  sudo apt-get clean -y
  sudo apt-get autoremove -y
  
  # X√≥a c√°c file t·∫°m trong /tmp
  sudo rm -rf /tmp/*
  
  # X√≥a cache Docker n·∫øu c·∫ßn
  echo "T·ª± ƒë·ªông x√≥a cache Docker."
  clean_docker="y"
  if [[ "$clean_docker" == "y" ]]; then
    echo "ƒêang x√≥a cache Docker..."
    sudo docker system prune -af --volumes
  fi
  
  # X√≥a c√°c file log c≈©
  sudo find /var/log -type f -name "*.gz" -delete
  sudo find /var/log -type f -name "*.1" -delete
  
  # X√≥a c√°c file .bak v√† .tmp
  sudo find ~ -type f -name "*.bak" -delete
  sudo find ~ -type f -name "*.tmp" -delete
  
  echo "D·ªçn d·∫πp ho√†n t·∫•t!"
}

echo "--------- üü¢ B·∫Øt ƒë·∫ßu clone repository -----------"
git clone https://github.com/thanhnn16/MIAI_n8n_dockercompose.git
mv MIAI_n8n_dockercompose n8n
cd n8n
cp .env.example .env
echo "--------- üî¥ Ho√†n th√†nh clone repository -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Docker -----------"
wait_for_apt && sudo apt update -y
wait_for_apt && sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
apt-cache policy docker-ce
wait_for_apt && sudo apt install -y docker-ce
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t Docker -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Docker Compose -----------"
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t Docker Compose -----------"

echo "--------- üü¢ Ki·ªÉm tra v√† c√†i ƒë·∫∑t NVIDIA driver -----------"
check_nvidia_driver
echo "--------- üî¥ Ho√†n th√†nh ki·ªÉm tra NVIDIA driver -----------"

echo "--------- üü¢ Ki·ªÉm tra v√† c√†i ƒë·∫∑t CUDA -----------"
check_cuda_installation
echo "--------- üî¥ Ho√†n th√†nh ki·ªÉm tra CUDA -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t NVIDIA support cho Docker -----------"
curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey \
| sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \
| sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' \
| sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
wait_for_apt && sudo apt-get update -y
wait_for_apt && sudo apt-get install -y nvidia-container-toolkit
sudo nvidia-ctk runtime configure --runtime=docker
sudo systemctl restart docker
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t NVIDIA support cho Docker -----------"

echo "--------- üü¢ Ki·ªÉm tra GPU cho Docker -----------"
verify_gpu_for_docker
echo "--------- üî¥ Ho√†n th√†nh ki·ªÉm tra GPU cho Docker -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Nginx -----------"
wait_for_apt && sudo apt update -y
wait_for_apt && sudo apt install -y nginx
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t Nginx -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Snap -----------"
wait_for_apt && sudo apt install -y snapd
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t Snap -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c·∫•u h√¨nh Nginx cho n8n -----------"
# Ki·ªÉm tra xem th∆∞ m·ª•c nginx/n8n c√≥ t·ªìn t·∫°i kh√¥ng
if [ -d "./nginx/n8n" ]; then
    # Copy file c·∫•u h√¨nh t·ª´ th∆∞ m·ª•c nginx/n8n v√†o /etc/nginx/sites-available
    sudo cp ./nginx/n8n /etc/nginx/sites-available/n8n
    # T·∫°o symbolic link t·ª´ sites-available ƒë·∫øn sites-enabled
    sudo ln -sf /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
    # Ki·ªÉm tra c·∫•u h√¨nh nginx
    sudo nginx -t
    # Kh·ªüi ƒë·ªông l·∫°i nginx
    sudo systemctl restart nginx
else
    echo "Th∆∞ m·ª•c nginx/n8n kh√¥ng t·ªìn t·∫°i, t·∫°o file c·∫•u h√¨nh Nginx m·∫∑c ƒë·ªãnh cho n8n"
    cat > ./n8n_nginx_config << 'EOL'
server {
    listen 80;
    server_name n8n.autoreel.io.vn;

    location / {
        proxy_pass http://localhost:5678;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
EOL
    sudo cp ./n8n_nginx_config /etc/nginx/sites-available/n8n
    sudo ln -sf /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
    sudo nginx -t
    sudo systemctl restart nginx
    # X√≥a file t·∫°m
    rm ./n8n_nginx_config
fi
echo "--------- üî¥ Ho√†n th√†nh c·∫•u h√¨nh Nginx cho n8n -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Certbot -----------"
sudo snap install --classic certbot
sudo ln -sf /snap/bin/certbot /usr/bin/certbot
echo "--------- üî¥ Ho√†n th√†nh c√†i ƒë·∫∑t Certbot -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p SSL v·ªõi Certbot -----------"
# Ch·∫°y certbot ƒë·ªÉ l·∫•y ch·ª©ng ch·ªâ SSL, ch·∫ø ƒë·ªô t·ª± ƒë·ªông
sudo certbot --nginx --non-interactive --agree-tos --redirect \
    --staple-ocsp --email admin@autoreel.io.vn -d n8n.autoreel.io.vn
echo "--------- üî¥ Ho√†n th√†nh thi·∫øt l·∫≠p SSL v·ªõi Certbot -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu build Docker Compose -----------"
cd ~/n8n

echo "T·∫°o th∆∞ m·ª•c storage cho ComfyUI..."
mkdir -p storage
chmod 777 storage

echo "ƒêang build c√°c container..."
sudo docker-compose build
echo "Build ho√†n t·∫•t!"
echo "--------- üî¥ Ho√†n th√†nh build Docker Compose -----------"

echo "--------- üü¢ Kh·ªüi ƒë·ªông n8n v·ªõi Docker Compose -----------"
echo "ƒêang kh·ªüi ƒë·ªông c√°c container..."
sudo docker-compose up -d
echo "C√°c container ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!"
echo "--------- üî¥ n8n ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông -----------"

echo "--------- üü¢ B·∫Øt ƒë·∫ßu t·∫£i Flux1 Checkpoint -----------"
echo "T·∫°o th∆∞ m·ª•c cho Flux1 Checkpoint..."
mkdir -p ~/n8n/storage/ComfyUI/models/checkpoints/FLUX1

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Flux1 Checkpoint
FLUX1_FILE=~/n8n/storage/ComfyUI/models/checkpoints/FLUX1/flux1-dev-fp8.safetensors

# Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
if [ -f "$FLUX1_FILE" ]; then
    echo "File Flux1-dev-fp8 Checkpoint ƒë√£ t·ªìn t·∫°i. B·ªè qua b∆∞·ªõc t·∫£i..."
else
    echo "ƒêang t·∫£i Flux1-dev-fp8 Checkpoint..."
    wget -O "$FLUX1_FILE" https://huggingface.co/Comfy-Org/flux1-dev/resolve/main/flux1-dev-fp8.safetensors
    
    # Ki·ªÉm tra xem t·∫£i th√†nh c√¥ng kh√¥ng
    if [ -f "$FLUX1_FILE" ]; then
        echo "T·∫£i Flux1-dev-fp8 Checkpoint th√†nh c√¥ng!"
    else
        echo "‚ö†Ô∏è T·∫£i Flux1-dev-fp8 Checkpoint kh√¥ng th√†nh c√¥ng. Vui l√≤ng t·∫£i th·ªß c√¥ng sau."
    fi
fi

echo "ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c v√† file..."
chmod -R 777 ~/n8n/storage/ComfyUI/models
echo "--------- üî¥ Ho√†n th√†nh t·∫£i Flux1 Checkpoint -----------"

echo "--------- üü¢ D·ªçn d·∫πp c√°c file t·∫°m v√† th∆∞ m·ª•c d∆∞ th·ª´a -----------"
cleanup_temp_files
echo "--------- üî¥ Ho√†n th√†nh d·ªçn d·∫πp -----------"

echo "C√†i ƒë·∫∑t ho√†n t·∫•t! Truy c·∫≠p n8n t·∫°i https://n8n.autoreel.io.vn"
echo ""
echo "Th√¥ng tin h·ªá th·ªëng:"
echo "- Docker version: $(docker --version)"
echo "- Docker Compose version: $(docker-compose --version)"
echo "- NVIDIA Driver version: $(nvidia-smi | grep "Driver Version" | awk '{print $3}')"
if command -v nvcc &> /dev/null; then
  echo "- CUDA version: $(nvcc --version | grep "release" | awk '{print $6}' | cut -d',' -f1)"
fi
echo ""
echo "N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ v·ªõi NVIDIA driver, vui l√≤ng th·ª≠ c√°c b∆∞·ªõc sau:"
echo "1. Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng: sudo reboot"
echo "2. Sau khi kh·ªüi ƒë·ªông l·∫°i, ki·ªÉm tra tr·∫°ng th√°i driver: nvidia-smi"
echo "3. N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ, ch·∫°y l·∫°i script n√†y ho·∫∑c c√†i ƒë·∫∑t th·ªß c√¥ng driver NVIDIA"

